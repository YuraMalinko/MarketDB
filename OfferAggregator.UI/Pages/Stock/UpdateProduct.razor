@using OfferAggregator.Bll.Models;
@using OfferAggregator.Bll;
@using OfferAggregator.Dal.Models;
@using OfferAggregator.Dal.Repositories;
@using System.ComponentModel.DataAnnotations;

<h3>Изменить наименование или группу товара</h3>

<EditForm Model="@_updateProduct" OnValidSubmit="@UpdateProductInStock">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div>
        <div class="left-part">Название товара:</div>
        <InputText id="name" @bind-Value="_updateProduct.Name" />
    </div>

    <div>
        <div class="left-part">Номер группы товара:</div>
        <InputSelect TValue="int" @bind-Value=_updateProduct.GroupId>
            @foreach (var group in _groups)
            {
                if (group != null)
                {
                    <option value="@group.Id">@group.Name</option>
                }
            }
        </InputSelect>
    </div>

    @if (!string.IsNullOrEmpty(_errorMessage))
    {
        <div>@_errorMessage</div>
    }

    <button type="submit">Изменить товар</button>
</EditForm>

@code {
    [Parameter]
    public int ProductId { get; set; }

    public ProductInputModel _updateProduct;

    private ProductService _productService;

    private string _errorMessage;

    private List<GroupModel> _groups = new();

    protected override void OnInitialized()
    {
        _updateProduct = new ProductInputModel();
        _productService = new ProductService(
        new ProductsRepository(),
        new ProductsReviewsAndStocksRepository(),
        new TagsRepository(),
        new GroupRepository(),
        new ClientRepository()
        );
        FillFormOfUpdateProduct();
    }

    private void UpdateProductInStock()
    {
        try
        {
            if (!string.IsNullOrEmpty(_updateProduct.Name) && _updateProduct.GroupId != 0)
            {
                _productService.UpdateProduct(_updateProduct);
                FillFormOfUpdateProduct();
            }
            _errorMessage = string.Empty;
        }
        catch (ArgumentException ex)
        {
            switch (ex.Message)
            {
                case "ProductId is not exist":
                    _errorMessage = "Такого товара не существует";
                    break;

                case "Product is deleted":
                    _errorMessage = "Такой товар удален";
                    break;

                case "GroupId is not exist":
                    _errorMessage = "Такой группы товаров не существует";
                    break;
            }
        }
        catch (Exception ex)
        {
            _errorMessage = "Произошла ошибка";
        }
    }

    private void FillFormOfUpdateProduct()
    {
        var _product = _productService.GetProductById(ProductId);
        _updateProduct.Id = _product.Id;
        _updateProduct.Name = _product.Name;
        _updateProduct.GroupId = _product.GroupId;
        _groups = _productService.GetAllGroups();
    }
}
