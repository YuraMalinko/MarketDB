
<div class="header-pages-stock">Оприходывать товар на складе</div>

<table>
    <div class="table-registrate-product">
    <td>
        <div style=" width: 530px;">
            <EditForm Model="@StockProduct" OnValidSubmit="@RegistrateProductInStock">
                <DataAnnotationsValidator />

                <div class="edit-form-row">
                    <div class="left-part">Название товара:</div>

                    <InputSelect TValue="int" style="max-width: 210px; width:200px;" ValueExpression="@(()=>StockProduct.ProductId)"
                                 Value="@StockProduct.ProductId"
                                 ValueChanged="@OnProductValueChange">
                            @foreach (var product in _products.OrderBy(p => p.Name).Where(FilterPredicat))
                            {
                                if (product != null)
                                {
                                <option value="@product.Id">@product.Name</option>
                                }
                            }
                    </InputSelect>
                </div>

                <div class="edit-form-row">
                    <div class="left-part">Количество товара:</div>
                    <InputNumber class="input-number" id="amount" @bind-Value="StockProduct.Amount" />
                </div>

                    @if (!string.IsNullOrEmpty(_errorMessage))
                    {
                    <div class="error-message">@_errorMessage</div>
                    }

                <button class="button-submit" type="submit">Оприходывать товар</button>
                <ValidationSummary style="padding-left:270px;" />
            </EditForm>

                @if (_isAdded)
                {
                <div class="pop-up-success-message">
                    Товар успешно оприходаван
                </div>
                }
        </div>
    </td>

    <td>
        <div class="filters" style="margin:0px; width:300px; padding:0px; padding-top: 15px;">
            <EditForm Model="@_filter">
                <div class="filters-row">Фильтр по наименованию товара</div>
                <InputText id="productNameReg" placeholder="Название товара" @bind-Value="_filter.ProductNameFilter" /><br />

                <button @onclick="NullAllFilters" class="button-submit">Сбросить фильтр</button>
            </EditForm>
        </div>
    </td>

    <td>
        <div style=" width: 450px;">
                @if (_currentProduct != null)
                {
                <span>Количество на складе: @_currentProduct.Amount</span> <br />
                <a href="/product/@StockProduct.ProductId" style="padding-top: 10px; font-family: Georgia, serif; color: navy">
                    <em>Карточка товара</em>
                </a>
                }
        </div>
    </td>
    </div>
</table>




@code {
    public StocksWithProductInputModel StockProduct { get; set; }

    private StocksWithProductOutputModel _currentProduct;

    private ProductService _productService;

    private string _errorMessage;

    private List<ProductOutputModel> _products = new();

    private Filter _filter = new();

    private bool _isAdded;

    private Timer _timer;

    protected override void OnInitialized()
    {
        StockProduct = new StocksWithProductInputModel();
        _productService = new ProductService(
        new ProductsRepository(),
        new ProductsReviewsAndStocksRepository(),
        new TagsRepository(),
        new GroupRepository(),
        new ClientRepository()
        );
        _products = _productService.GetAllProducts();
        _timer = new Timer();
        _timer.Interval = 3000;
        _timer.Elapsed += StopSowing;
    }

    private void RegistrateProductInStock()
    {
        try
        {
            if (StockProduct.Amount != 0 && StockProduct.ProductId > 0)
            {
                _productService.RegistrateProductInStock(StockProduct);
                StockProduct.Amount = 0;
                _isAdded = true;
                _timer.Start();
                ActualizeAmountProduct();
            }
            _errorMessage = string.Empty;
        }
        catch (Exception ex)
        {
            _errorMessage = "Произошла ошибка";
        }
    }

    private async void StopSowing(object sender, ElapsedEventArgs args)
    {
        _isAdded = false;
        await InvokeAsync(StateHasChanged);
        _timer.Stop();
    }

    private void OnProductValueChange(int value)
    {

        StockProduct.ProductId = value;
        ActualizeAmountProduct();
    }

    private void ActualizeAmountProduct()
    {
        try
        {
            if (StockProduct != null && StockProduct.ProductId != 0)
            {
                _currentProduct = _productService.GetAmountByProductId(StockProduct.ProductId);
            }
            else
            {
                _currentProduct = null;
            }
        }
        catch (Exception ex)
        {
            _currentProduct = null;
        }
    }

    private class Filter
    {
        public string? ProductNameFilter { get; set; }
    }

    private bool FilterPredicat(ProductOutputModel product)
    {
        return (string.IsNullOrEmpty(_filter.ProductNameFilter) || product.Name.Contains(_filter.ProductNameFilter, StringComparison.InvariantCultureIgnoreCase));
    }

    private void NullAllFilters()
    {
        _filter = new Filter();
    }
}

