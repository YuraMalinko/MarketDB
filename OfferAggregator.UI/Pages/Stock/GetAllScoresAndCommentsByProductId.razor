@using OfferAggregator.Bll.Models;
@using OfferAggregator.Bll;
@using OfferAggregator.Dal.Models;
@using OfferAggregator.Dal.Repositories;
@using System.ComponentModel.DataAnnotations;

<div style="width: 500px">
    <AddScoreAndComment ProductId="ProductId" OnReviewAdded="GetAllScoresAndCommentsForProduct" />
</div>

<div>
    <div style="padding-top:20px; padding-bottom:10px; padding-left:5px; font-size:25px;">
        Оценки и комментарии на товар
    </div>

    @if (_productScoresComment == null)
    {
        <div>Товар не найден</div>
    }
    else if (_productScoresComment.ProductReviews.Count > 0)
    {
        <table class="table-get-scores-comments-on-product">
            <th style="width:160px;">Клиент</th>
            <th>Оценка</th>
            <th style="width:550px;">Комментарий</th>
            @foreach (var productReview in _productScoresComment.ProductReviews)
            {
                <tr>
                    <td>@productReview.Name</td>

                    @if (@productReview.Score != null)
                    {
                        <td>@productReview.Score</td>
                    }
                    else
                    {
                        <td>-</td>
                    }

                    @if (@productReview.Comment != null)
                    {
                        <td>@productReview.Comment</td>
                    }
                    else
                    {
                        <td>-</td>
                    }
                </tr>
            }
        </table>
    }
    else
    {
        <div>На данный товар оценки или комментарии еще не оставляли</div>
    }

    @if (!string.IsNullOrEmpty(_errorMessage))
    {
        <div class="error-message">
            @_errorMessage
        </div>
    }
</div>

@code {
    [Parameter]
    public int ProductId { get; set; }

    private ProductWithScoresAndCommentsOutputModel _productScoresComment;

    private ProductService _productService;

    private string _errorMessage;

    private List<ProductReviewOutputModel> _productReviews = new();

    protected override void OnInitialized()
    {
        _productService = new ProductService(
        new ProductsRepository(),
        new ProductsReviewsAndStocksRepository(),
        new TagsRepository(),
        new GroupRepository(),
        new ClientRepository()
        );
        GetAllScoresAndCommentsForProduct();
    }

    private void GetAllScoresAndCommentsForProduct()
    {
        try
        {
            _productScoresComment = _productService.GetAllScoresAndCommentsForProductByProductId(ProductId);
            _errorMessage = string.Empty;
        }
        catch (ArgumentException ex)
        {
            _errorMessage = "Такого товара не существует";
        }
        catch (Exception ex)
        {
            _errorMessage = "Произошла ошибка";
        }
    }
}
