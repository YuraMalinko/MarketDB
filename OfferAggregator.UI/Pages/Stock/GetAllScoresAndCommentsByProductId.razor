@using OfferAggregator.Bll.Models;
@using OfferAggregator.Bll;
@using OfferAggregator.Dal.Models;
@using OfferAggregator.Dal.Repositories;
@using System.ComponentModel.DataAnnotations;

<h3>Оценки и комментарии на товар</h3>

@if (_productScoresComment.ProductReviews.Count > 0)
{
    <table>
        <th>ClientId</th>
        <th>Оценка</th>
        <th>Комментарий</th>
        @foreach (var productReview in _productScoresComment.ProductReviews)
        {
            <tr>
                <td>@productReview.ClientId</td>
                <td>@productReview.Score</td>
                <td>@productReview.Comment</td>
            </tr>
        }
    </table>
}
else
{
    <div>На данный товар оценки или комментарии еще не оставляли</div>
}

@if (!string.IsNullOrEmpty(_errorMessage))
{
    <div>@_errorMessage</div>
}

@code {
    [Parameter]
    public int ProductId { get; set; }

    private ProductWithScoresAndCommentsOutputModel _productScoresComment;

    private ProductService _productService;

    private string _errorMessage;

    protected override void OnInitialized()
    {
        _productScoresComment = new ProductWithScoresAndCommentsOutputModel();
        _productService = new ProductService(
        new ProductsRepository(),
        new ProductsReviewsAndStocksRepository(),
        new TagsRepository(),
        new GroupRepository(),
        new ClientRepository()
        );
        GetAllScoresAndCommentsForProduct();
    }

    private void GetAllScoresAndCommentsForProduct()
    {
        try
        {
            _productScoresComment = _productService.GetAllScoresAndCommentsForProductByProductId(ProductId);
            _errorMessage = string.Empty;
        }
        catch (ArgumentException ex)
        {
            _errorMessage = "Такого товара не существует";
        }
        catch (Exception ex)
        {
            _errorMessage = "Произошла ошибка";
        }
    }
}
