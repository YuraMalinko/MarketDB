@*@using OfferAggregator.Bll.Models;
@using OfferAggregator.Bll;
@using OfferAggregator.Dal.Models;
@using OfferAggregator.Dal.Repositories;
@using System.ComponentModel.DataAnnotations;

<h3>Статистика по товару</h3>

<div>
    <span>Количество проданного товара за все время: @_productStatistic.SumOfCountofProduct</span><br/>
    <span>Количество заказов товара за все время: @_productStatistic.CountOfOrders</span><br/>
    <span>Количество клиентов, заказавших товар за все время: @_productStatistic.CountOfClients</span><br/>
    <span>
        Средняя оценка товара: @if (_productStatistic.AverageScore != null)
        {
            @Math.Round((double)_productStatistic.AverageScore,1)
        }
        else
        {
            <span>-</span>
        }
    </span>
</div>

@if (!string.IsNullOrEmpty(_errorMessage))
{
<div>@_errorMessage</div>    
}

@code {
    [Parameter]
    public int ProductId { get; set; }

    private ProductsStatisticOutputModel _productStatistic;

    private ProductService _productService;

    private string _errorMessage;

    protected override void OnInitialized()
    {
        _productStatistic = new ProductsStatisticOutputModel();
        _productService = new ProductService(
        new ProductsRepository(),
        new ProductsReviewsAndStocksRepository(),
        new TagsRepository(),
        new GroupRepository(),
        new ClientRepository()
        );
        GetProductStatisticById();
    }

    private void GetProductStatisticById()
    {
        try
        {
            _productStatistic = _productService.GetProductStatisticById(ProductId);
            _errorMessage = string.Empty;
        }
        catch (ArgumentException ex)
        {
            _errorMessage = "Такого товара не существует";
        }
        catch (Exception ex)
        {
            _errorMessage = "Произошла ошибка";
        }
    }
}
*@