@*@*@*@using OfferAggregator.Bll.Models;
@using OfferAggregator.Bll;
@using OfferAggregator.Dal.Models;
@using OfferAggregator.Dal.Repositories;
@using System.ComponentModel.DataAnnotations;
@using System.Timers
@using System.Threading.Tasks

<h3>UpdateReview</h3>

<div class="change-review">
    <div>Для изменения оценки и/или комментария заполните форму ниже</div>
   @* <EditForm Model="_updateProductReview" OnInvalidSubmit="@UpdateScoreOrComment">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div>Список клиентов, которые оставляли ревью на товар</div>
        <InputSelect Tvalue="int" @bind-Value="_updateProductReview.ClientId">
            @foreach (var client in _clients)
            {
                if (client != null)
                {
                    <option value="@client.Id">@client.Name</option>
                }
            }
        </InputSelect>

        <div>Выберите новую оценку клиента от 1 до 5</div>
        <InputSelect TValue="int?" @bind-Value="_updateProductReview.Score">
            @foreach (var score in _scores)
            {
                <option value="@score">@score</option>
            }
        </InputSelect>

        <div>Напишите новый комментарий клиента</div>
        <InputText id="comment" @bind-Value="_updateProductReview.Comment" />

        @if (!string.IsNullOrEmpty(_errorMessage))
        {
            <div>@_errorMessage</div>
        }

        <button type="submit">Изменить ревью на товар</button>

    </EditForm>*@
</div>

@code {
    [Parameter]
    public int ProductId { get; set; }

    private ProductReviewInputModel _updateProductReview;

    private ProductReviewOutputModel _productReview;

    private ProductService _productService;

    private ClientService _clientService;

    private List<ClientModel> _clients = new();

    private List<int> _scores = new List<int> { 1, 2, 3, 4, 5 };

    private string _errorMessage;

    protected override void OnInitialized()
    {
        // _updateProductReview = new ProductReviewInputModel();
        _productService = new ProductService(
       new ProductsRepository(),
       new ProductsReviewsAndStocksRepository(),
       new TagsRepository(),
       new GroupRepository(),
       new ClientRepository());

        _clientService = new ClientService(
        new ClientRepository(),
        new ProductsRepository());

        var getClients = _clientService.GetClientsWhoOrderedProductByProductId(ProductId);
        _clients = getClients?.Clients ?? new List<ClientModel>();
        // _updateProductReview.ProductId = ProductId;
    }

    private void FillFormOfUpdateReview()
    {
        List<ProductReviewOutputModel> listProductReview = new List<ProductReviewOutputModel>();
        listProductReview = _productService.GetAllScoresAndCommentsForProductByProductIdAndClientId(ProductId, _updateProductReview.ClientId).ProductReviews;
    }

    private void UpdateScoreOrComment()
    {
        //if (_updateProductReview.ProductReviews. != null && (_updateProductReview != null || !string.IsNullOrEmpty(_updateProductReview.Comment)))
        //{
        //    _productService.UpdateScoreAndCommentOfProductReview(_updateProductReview);    
        //}
    }

}
*@*@*@