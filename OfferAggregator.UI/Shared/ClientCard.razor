<div class="client_card">
    <div>
        <h4>
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-file-earmark-person-fill" viewBox="0 0 16 16">
                <path d="M9.293 0H4a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2V4.707A1 1 0 0 0 13.707 4L10 .293A1 1 0 0 0 9.293 0zM9.5 3.5v-2l3 3h-2a1 1 0 0 1-1-1zM11 8a3 3 0 1 1-6 0 3 3 0 0 1 6 0zm2 5.755V14a1 1 0 0 1-1 1H4a1 1 0 0 1-1-1v-.245S4 12 8 12s5 1.755 5 1.755z"/>
            </svg>
            @client.Id - @client.Name - @client.PhoneNumber
        </h4>
    </div>
    <div class="d-grid gap-2 d-md-flex justify-content-md-end">
        <a href="/clients/@client.Id"><button type="button" class="btn btn-outline-info"> Информация </button></a>
        <button type="button" class="btn btn-outline-warning" @onclick="ClickUpdate"> Изменить </button>
        <button type="button" class="btn btn-outline-danger" @onclick="ClickDelete"> Удалить </button>
    </div>
</div>

@code {
    [Parameter] public ClientOutputModel client {get; set;}
    [Parameter] public EventCallback<int>  btnDelete { get; set; }
    [Parameter] public EventCallback<ClientInputModel> btnUpdate { get; set; }

    private void ClickDelete()
    {
        btnDelete.InvokeAsync(client.Id);
    }

    private void ClickUpdate()
    {
        ClientInputModel updateClient = new ClientInputModel
            {
                Name = client.Name,
                PhoneNumber = client.PhoneNumber
            };

        btnUpdate.InvokeAsync(updateClient);
    }
}